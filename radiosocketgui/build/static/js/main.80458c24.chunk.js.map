{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Statistics","props","style","margin","data","labels","report","map","r","t","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","tx_bits","rx_bits","options","scales","yAxes","ticks","beginAtZero","suggestedMin","suggestedMax","App","context","state","reports","setInterval","fetch","method","headers","body","JSON","stringify","then","p","json","_update","this","forEach","title","push","length","stats","tx_packet","tx_errors","rx_packets","rx_missed","rx_dt","other_rx_bits","other_rx_packets","other_rx_missed","other_rx_dt","slice","setState","className","Object","keys","key","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80458c24.chunk.js","sourcesContent":["import React from 'react';\nimport {Line} from 'react-chartjs-2';\n\nimport './App.css';\n\nconst Statistics = (props) => {\n    return (\n        <div style={{margin: 100 }}>\n            <Line data={{\n                labels: props.report.map(r => r.t),\n                datasets: [\n                    {\n                        label: 'TX Mbps',\n                        fill: false,\n                        lineTension: 0.1,\n                        backgroundColor: 'rgba(140,102,192,0.4)',\n                        borderColor: 'rgba(150,102,192,1)',\n                        borderCapStyle: 'butt',\n                        borderDash: [],\n                        borderDashOffset: 0.0,\n                        borderJoinStyle: 'miter',\n                        pointBorderColor: 'rgba(140,102,192,1)',\n                        pointBackgroundColor: '#fff',\n                        pointBorderWidth: 1,\n                        pointHoverRadius: 5,\n                        pointHoverBackgroundColor: 'rgba(140,102,192,1)',\n                        pointHoverBorderColor: 'rgba(220,220,220,1)',\n                        pointHoverBorderWidth: 2,\n                        pointRadius: 1,\n                        pointHitRadius: 10,\n                        data: props.report.map(r => r.tx_bits / 1000000)\n                    },\n                    {\n                        label: 'RX Mbps',\n                        fill: false,\n                        lineTension: 0.1,\n                        backgroundColor: 'rgba(75,192,192,0.4)',\n                        borderColor: 'rgba(75,192,192,1)',\n                        borderCapStyle: 'butt',\n                        borderDash: [],\n                        borderDashOffset: 0.0,\n                        borderJoinStyle: 'miter',\n                        pointBorderColor: 'rgba(75,192,192,1)',\n                        pointBackgroundColor: '#fff',\n                        pointBorderWidth: 1,\n                        pointHoverRadius: 5,\n                        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                        pointHoverBorderColor: 'rgba(220,220,220,1)',\n                        pointHoverBorderWidth: 2,\n                        pointRadius: 1,\n                        pointHitRadius: 10,\n                        data: props.report.map(r => r.rx_bits / 1000000)\n                    }\n                ]\n            }} options={{\n                scales: {\n                    yAxes: [{\n                        ticks: {\n                            beginAtZero: 0,\n                            suggestedMin: 0.5,\n                            suggestedMax: 1\n                        }\n                    }]\n                }\n            }\n            } /></div>\n    );\n}\n\nclass App extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {reports: {}}\n        setInterval(() => {\n            fetch('/cmd', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({'cmd': 'report'})\n            }).then(p => p.json()).then(report => this._update(report));\n        }, 600);\n    }\n\n    _update(report) {\n        let reports = this.state.reports;\n\n        report.forEach(r => {\n            if (!reports[r.title]) {\n                reports[r.title] = [];\n            }\n\n            reports[r.title].push({\n                t: reports[r.title].length == 0 ? 0 : reports[r.title][reports[r.title].length - 1].t + 1,\n                tx_bits: r.stats[0],\n                tx_packet: r.stats[1],\n                tx_errors: r.stats[2],\n                rx_bits: r.stats[3],\n                rx_packets: r.stats[4],\n                rx_missed: r.stats[5],\n                rx_dt: r.stats[6],\n                other_rx_bits: r.stats[7],\n                other_rx_packets: r.stats[8],\n                other_rx_missed: r.stats[9],\n                other_rx_dt: r.stats[10],\n            })\n\n            if(reports[r.title].length > 50){\n                reports[r.title] = reports[r.title].slice(reports[r.title].length - 50);\n            }\n        });\n\n        this.setState({reports});\n    }\n\n    render() {\n        return (\n            <div className=\"App\" >\n                {Object.keys(this.state.reports).map(key => (\n                    <div>\n                        <h1>{key}</h1>\n                        <Statistics report={this.state.reports[key]} />\n                    </div>\n                ))}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}