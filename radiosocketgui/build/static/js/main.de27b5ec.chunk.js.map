{"version":3,"sources":["Port.js","Channel.js","Status.js","App.js","index.js"],"names":["args","c","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","opts","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","suggestedMin","props","className","report","title","bound","onClick","command","cmd","port","id","new_channel","data","labels","stats","map","r","t","datasets","label","rx_bits","rx_missed","options","height","appReport","tx_bits","tx_skipped","other_rx_bits","usage","App","state","reports","setInterval","_command","then","_update","fetch","method","headers","body","JSON","stringify","p","json","new_reports","console","log","forEach","unique","kind","res","Math","round","Date","getTime","length","slice","this","setState","Object","values","Port","Status","Channel","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de27b5ec.chunk.js","sourcesContent":["import React from 'react';\nimport {Line} from 'react-chartjs-2';\n\nimport './App.css'\n\nconst args = (c) => ({\n    fill: false,\n    lineTension: 0.1,\n    backgroundColor: c,\n    borderColor: c,\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderJoinStyle: 'miter',\n    pointBorderColor: c,\n    pointBackgroundColor: '#ffffff',\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointHoverBackgroundColor: c,\n    pointHoverBorderColor: 'rgba(220,220,220,1)',\n    pointHoverBorderWidth: 2,\n    pointRadius: 1,\n    pointHitRadius: 10,\n})\n\nconst opts = {\n    maintainAspectRatio: false,\n    scales: {\n        yAxes: [{\n            ticks: {\n                beginAtZero: 0,\n                suggestedMin: 0.5\n            }\n        }]\n    }\n}\n\n\nexport default (props) => {\n    return (\n        <div className=\"Port\">\n            <h1>{props.report.title}</h1>\n            <h2>bound to channel C{props.report.bound}</h2>\n            <div className=\"Port-control\">\n                <div className=\"Port-control-btn\" onClick={() => props.command({\n                    cmd: 'switch',\n                    port: props.report.id,\n                    new_channel: props.report.bound - 12\n                })}>\n                    --\n                </div>\n                <div className=\"Port-control-btn\" onClick={() => props.command({\n                    cmd: 'switch',\n                    port: props.report.id,\n                    new_channel: props.report.bound - 1\n                })}>\n                    -\n                </div>\n                <div className=\"Port-control-btn\" onClick={() => props.command({\n                    cmd: 'switch',\n                    port: props.report.id,\n                    new_channel: props.report.bound + 1\n                })}>\n                    +\n                </div>\n                <div className=\"Port-control-btn\" onClick={() => props.command({\n                    cmd: 'switch',\n                    port: props.report.id,\n                    new_channel: props.report.bound + 12\n                })}>\n                    ++\n                </div>\n            </div>\n            <div className=\"Stat-container\">\n                <div className=\"Stat-container-row\">\n                    <Line data={{\n                        labels: props.report.stats.map(r => r.t),\n                        datasets: [\n                            {\n                                ...args('rgba(155,102,192)'),\n                                label: 'RX Mbps (sent)',\n                                data: props.report.stats.map(r => r.rx_bits / 1000000 / (1. - r.rx_missed))\n                            },\n                            {\n                                ...args('rgba(75,192,192)'),\n                                label: 'RX Mbps',\n                                data: props.report.stats.map(r => r.rx_bits / 1000000)\n                            }\n                        ]\n                    }} options={opts} height={400} />\n                </div>\n                <div className=\"Stat-container-row\">\n                    <Line data={{\n                        labels: props.report.stats.map(r => r.t),\n                        datasets: [\n                            props.appReport ? {\n                                ...args('rgba(155,100,100)'),\n                                label: 'TX Mbps (input)',\n                                data: props.appReport.stats.map(r => r.tx_bits / 1000000)\n                            } : {},\n                            props.appReport ? {\n                                ...args('rgba(155,0,0)'),\n                                label: 'TX Mbps (without skipped)',\n                                data: props.appReport.stats.map(r => (1. - r.tx_skipped) * r.tx_bits / 1000000)\n                            } : {},\n                            {\n                                ...args('rgba(155,102,192)'),\n                                label: 'TX Mbps',\n                                data: props.report.stats.map(r => r.tx_bits / 1000000)\n                            },\n                            {\n                                ...args('rgba(75,192,192)'),\n                                label: 'TX Mbps (received)',\n                                data: props.report.stats.map(r => r.other_rx_bits / 1000000)\n                            }\n                        ]\n                    }} options={opts} height={400} />\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport {Line} from 'react-chartjs-2';\n\nimport './App.css'\n\nconst args = (c) => ({\n    fill: false,\n    lineTension: 0.1,\n    backgroundColor: c,\n    borderColor: c,\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderJoinStyle: 'miter',\n    pointBorderColor: c,\n    pointBackgroundColor: '#ffffff',\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointHoverBackgroundColor: c,\n    pointHoverBorderColor: 'rgba(220,220,220,1)',\n    pointHoverBorderWidth: 2,\n    pointRadius: 1,\n    pointHitRadius: 10,\n})\n\nconst opts = {\n    maintainAspectRatio: false,\n    scales: {\n        yAxes: [{\n            ticks: {\n                beginAtZero: 0,\n                suggestedMin: 0.5\n            }\n        }]\n    }\n}\n\n\n\nexport default (props) => {\n    return (\n        <div className=\"Port\">\n            <h1>{props.report.title}</h1>\n            <div className=\"Stat-container\">\n                <div className=\"Stat-container-row\">\n                    <Line data={{\n                        labels: props.report.stats.map(r => r.t),\n                        datasets: [\n                            {\n                                ...args('rgba(155,102,192)'),\n                                label: 'RX Mbps (sent)',\n                                data: props.report.stats.map(r => r.rx_bits / 1000000 / (1. - r.rx_missed))\n                            },\n                            {\n                                ...args('rgba(75,192,192)'),\n                                label: 'RX Mbps',\n                                data: props.report.stats.map(r => r.rx_bits / 1000000)\n                            }\n                        ]\n                    }} options={opts} height={400} />\n                </div>\n                <div className=\"Stat-container-row\">\n                    <Line data={{\n                        labels: props.report.stats.map(r => r.t),\n                        datasets: [\n                            {\n                                ...args('rgba(155,102,192)'),\n                                label: 'TX Mbps',\n                                data: props.report.stats.map(r => r.tx_bits / 1000000)\n                            },\n                            {\n                                ...args('rgba(75,192,192)'),\n                                label: 'TX Mbps (received)',\n                                data: props.report.stats.map(r => r.other_rx_bits / 1000000)\n                            }\n                        ]\n                    }} options={opts} height={400} />\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport {Line} from 'react-chartjs-2';\n\nimport './App.css';\n\nconst args = {\n    fill: false,\n    lineTension: 0.1,\n    backgroundColor: 'rgba(75,192,192,0.4)',\n    borderColor: 'rgba(75,192,192,1)',\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderJoinStyle: 'miter',\n    pointBorderColor: 'rgba(75,192,192,1)',\n    pointBackgroundColor: '#ffffff',\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n    pointHoverBorderColor: 'rgba(220,220,220,1)',\n    pointHoverBorderWidth: 2,\n    pointRadius: 1,\n    pointHitRadius: 10,\n}\nconst opts = {\n    maintainAspectRatio: false,\n    scales: {\n        yAxes: [{\n            ticks: {\n                beginAtZero: 0,\n                suggestedMin: 100\n            }\n        }]\n    }\n}\n\n\nexport default (props) => {\n    return (\n        <div className=\"Status\">\n            <h1>Status</h1>\n            <div className=\"Stat-container\">\n                <div className=\"Stat-container-row\">\n                    <Line data={{\n                        labels: props.report.stats.map(r => r.t),\n                        datasets: [\n                            {\n                                ...args,\n                                label: 'Usage',\n                                data: props.report.stats.map(r => r.usage * 100)\n                            }\n                        ]\n                    }} options={opts} height={400} />\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\n\nimport Port from './Port';\nimport Channel from './Channel';\nimport Status from './Status';\n\nimport './App.css';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {reports: {}}\n        setInterval(() => {\n            this._command({ 'cmd': 'report' }).then(reports => this._update(reports));\n        }, 1000);\n    }\n\n    _command(cmd) {\n        return fetch('/cmd', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(cmd)\n        }).then(p => p.json());\n    }\n\n    _update(reports) {\n        let new_reports = {}\n        console.log(reports);\n\n        reports.forEach(r => {\n            let unique = r.kind + r.id;\n            let res = {\n                ...r,\n                stats: [\n                    ...(this.state.reports[unique] ?\n                        this.state.reports[unique].stats : []),\n                    {...r.stats, t: Math.round(new Date().getTime()/1000)%100 }\n                ]\n            };\n\n            if (res.stats.length > 50) {\n                res.stats =\n                    res.stats.slice(res.stats.length - 50);\n            }\n\n            new_reports[unique] = res;\n        });\n\n        this.setState({ reports: new_reports });\n    }\n\n    render() {\n        return (\n            <div className=\"App\" >\n                {Object.values(this.state.reports).map(r => (\n                    r.kind == 'port' ? \n                        <Port report={r} command={this._command}\n                            appReport={this.state.reports[\"app\" + r.id]}/> : \n                    r.kind == 'status' ?\n                        <Status report={r} command={this._command}/> :\n                    r.kind == 'channel' ?\n                        <Channel report={r} command={this._command}/> : null\n                ))}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}