{"version":3,"sources":["Port.js","Channel.js","Status.js","App.js","index.js"],"names":["args","c","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","opts","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","suggestedMin","suggestedMax","props","className","report","key","bound","Math","round","stats","length","tx_fec_factor","rx_fec_factor","tx_bits_packet_size","rx_bits_packet_size","onClick","switchChannel","id","data","labels","map","_","i","datasets","label","r","other_tx_bits","rx_bits","options","height","appReport","tx_bits","tx_skipped","other_rx_bits","usage","App","this","reports","Object","values","kind","Port","switch_channel","Status","command","_command","Channel","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c9f7c75d.chunk.js","sourcesContent":["import React from 'react';\nimport {Line} from 'react-chartjs-2';\n\nimport './App.css'\n\nconst args = (c) => ({\n    fill: false,\n    lineTension: 0.1,\n    backgroundColor: c,\n    borderColor: c,\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderJoinStyle: 'miter',\n    pointBorderColor: c,\n    pointBackgroundColor: '#ffffff',\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointHoverBackgroundColor: c,\n    pointHoverBorderColor: 'rgba(220,220,220,1)',\n    pointHoverBorderWidth: 2,\n    pointRadius: 1,\n    pointHitRadius: 10,\n})\n\nconst opts = {\n    maintainAspectRatio: false,\n    scales: {\n        yAxes: [{\n            ticks: {\n                beginAtZero: 0,\n                suggestedMin: 0.5,\n                suggestedMax: 0.5\n            }\n        }]\n    }\n}\n\n\nexport default (props) => {\n    return (\n        <div className=\"Port\">\n            <h1>{props.report.key}</h1>\n            <h2>bound to channel C{props.report.bound}</h2>\n                <h2>FEC factor TX: {Math.round(props.report.stats[props.report.stats.length - 1].tx_fec_factor * 100)/100.} / RX {Math.round(props.report.stats[props.report.stats.length - 1].rx_fec_factor*100)/100} </h2>\n                <h2>Packet size TX: {Math.round(props.report.stats[props.report.stats.length - 1].tx_bits_packet_size / 8)}b / RX {Math.round(props.report.stats[props.report.stats.length - 1].rx_bits_packet_size / 8)}b </h2>\n            <div className=\"Port-control\">\n                <div className=\"Port-control-btn\" onClick={() => props.switchChannel(\n                    props.report.id, props.report.bound - 12)}>\n                    --\n                </div>\n                <div className=\"Port-control-btn\" onClick={() => props.switchChannel(\n                    props.report.id, props.report.bound - 1)}>\n                    -\n                </div>\n                <div className=\"Port-control-btn\" onClick={() => props.switchChannel(\n                    props.report.id, props.report.bound + 1)}>\n                    +\n                </div>\n                <div className=\"Port-control-btn\" onClick={() => props.switchChannel(\n                    props.report.id, props.report.bound + 12)}>\n                    ++\n                </div>\n            </div>\n            <div className=\"Stat-container\">\n                <div className=\"Stat-container-row\">\n                    <Line data={{\n                        labels: props.report.stats.map((_, i) => i),\n                        datasets: [\n                            {\n                                ...args('rgba(155,102,192)'),\n                                label: 'RX Mbps (sent)',\n                                data: props.report.stats.map(r => r.other_tx_bits / 1000000)\n                            },\n                            {\n                                ...args('rgba(75,192,192)'),\n                                label: 'RX Mbps',\n                                data: props.report.stats.map(r => r.rx_bits / 1000000)\n                            }\n                        ]\n                    }} options={opts} height={400} />\n                </div>\n                <div className=\"Stat-container-row\">\n                    <Line data={{\n                        labels: props.report.stats.map((_, i) => i),\n                        datasets: [\n                            props.appReport ? {\n                                ...args('rgba(155,100,100)'),\n                                label: 'TX Mbps (input)',\n                                data: props.appReport.stats.map(r => r.tx_bits / 1000000)\n                            } : null,\n                            props.appReport ? {\n                                ...args('rgba(155,0,0)'),\n                                label: 'TX Mbps (without skipped)',\n                                data: props.appReport.stats.map(r => (1. - r.tx_skipped) * r.tx_bits / 1000000)\n                            } : null,\n                            {\n                                ...args('rgba(155,102,192)'),\n                                label: 'TX Mbps',\n                                data: props.report.stats.map(r => r.tx_bits / 1000000)\n                            },\n                            {\n                                ...args('rgba(75,192,192)'),\n                                label: 'TX Mbps (received)',\n                                data: props.report.stats.map(r => r.other_rx_bits / 1000000)\n                            }\n                        ]\n                    }} options={opts} height={400} />\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport {Line} from 'react-chartjs-2';\n\nimport './App.css'\n\nconst args = (c) => ({\n    fill: false,\n    lineTension: 0.1,\n    backgroundColor: c,\n    borderColor: c,\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderJoinStyle: 'miter',\n    pointBorderColor: c,\n    pointBackgroundColor: '#ffffff',\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointHoverBackgroundColor: c,\n    pointHoverBorderColor: 'rgba(220,220,220,1)',\n    pointHoverBorderWidth: 2,\n    pointRadius: 1,\n    pointHitRadius: 10,\n})\n\nconst opts = {\n    maintainAspectRatio: false,\n    scales: {\n        yAxes: [{\n            ticks: {\n                beginAtZero: 0,\n                suggestedMin: 0.5,\n                suggestedMax: 0.5\n            }\n        }]\n    }\n}\n\n\n\nexport default (props) => {\n    return (\n        <div className=\"Port\">\n            <h1>{props.report.key}</h1>\n                <h2>Packet size TX: {Math.round(props.report.stats[props.report.stats.length - 1].tx_bits_packet_size / 8)}b / RX {Math.round(props.report.stats[props.report.stats.length - 1].rx_bits_packet_size / 8)}b </h2>\n            <div className=\"Stat-container\">\n                <div className=\"Stat-container-row\">\n                    <Line data={{\n                        labels: props.report.stats.map((_, i) => i),\n                        datasets: [\n                            {\n                                ...args('rgba(155,102,192)'),\n                                label: 'RX Mbps (sent)',\n                                data: props.report.stats.map(r => r.other_tx_bits / 1000000)\n                            },\n                            {\n                                ...args('rgba(75,192,192)'),\n                                label: 'RX Mbps',\n                                data: props.report.stats.map(r => r.rx_bits / 1000000)\n                            }\n                        ]\n                    }} options={opts} height={400} />\n                </div>\n                <div className=\"Stat-container-row\">\n                    <Line data={{\n                        labels: props.report.stats.map((_, i) => i),\n                        datasets: [\n                            {\n                                ...args('rgba(155,102,192)'),\n                                label: 'TX Mbps',\n                                data: props.report.stats.map(r => r.tx_bits / 1000000)\n                            },\n                            {\n                                ...args('rgba(75,192,192)'),\n                                label: 'TX Mbps (received)',\n                                data: props.report.stats.map(r => r.other_rx_bits / 1000000)\n                            }\n                        ]\n                    }} options={opts} height={400} />\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport {Line} from 'react-chartjs-2';\n\nimport './App.css';\n\nconst args = {\n    fill: false,\n    lineTension: 0.1,\n    backgroundColor: 'rgba(75,192,192,0.4)',\n    borderColor: 'rgba(75,192,192,1)',\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderJoinStyle: 'miter',\n    pointBorderColor: 'rgba(75,192,192,1)',\n    pointBackgroundColor: '#ffffff',\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n    pointHoverBorderColor: 'rgba(220,220,220,1)',\n    pointHoverBorderWidth: 2,\n    pointRadius: 1,\n    pointHitRadius: 10,\n}\nconst opts = {\n    maintainAspectRatio: false,\n    scales: {\n        yAxes: [{\n            ticks: {\n                beginAtZero: 0,\n                suggestedMin: 100\n            }\n        }]\n    }\n}\n\n\nexport default (props) => {\n    return (\n        <div className=\"Status\">\n            <h1>Status</h1>\n            <div className=\"Stat-container\">\n                <div className=\"Stat-container-row\">\n                    <Line data={{\n                        labels: props.report.stats.map((_, i) => i),\n                        datasets: [\n                            {\n                                ...args,\n                                label: 'Usage',\n                                data: props.report.stats.map(r => r.usage * 100)\n                            }\n                        ]\n                    }} options={opts} height={400} />\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\n\nimport Port from './Port';\nimport Channel from './Channel';\nimport Status from './Status';\n\nimport './App.css';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        if (!this.props.reports) {\n            return (\n                <div className=\"App\" >\n                    Loading...\n                </div>\n            );\n        }\n        return (\n            <div className=\"App\" >\n                {Object.values(this.props.reports).map(r => (\n                    r.kind == 'port' ?\n                        <Port report={r}\n                            switchChannel={this.props.switch_channel}\n                            appReport={this.props.reports[\"A\" + r.id]} /> :\n                        r.kind == 'status' ?\n                            <Status report={r} command={this._command} /> :\n                            r.kind == 'channel' ?\n                                <Channel report={r} command={this._command} /> : null\n                ))}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { PyreactRoot } from 'pyreact-js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PyreactRoot>\n        {(props) => <App {...props} />}\n    </PyreactRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}